"""
Agentes especialistas médicos para distintas áreas de conocimiento.
"""
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain.memory import ConversationBufferMemory
import os
import json
from pathlib import Path
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

class SpecialistAgent:
    """
    Agente médico especialista que proporciona respuestas específicas
    según su área de especialidad.
    """
    def __init__(self, specialty, llm=None):
        """
        Inicializa el agente especialista
        
        Args:
            specialty: Especialidad médica del agente
            llm: Modelo de lenguaje a utilizar (opcional)
        """
        self.specialty = specialty
        self.llm = llm or ChatOpenAI(
            model="gpt-4.1", 
            temperature=0.2,
            api_key=os.getenv("OPENAI_API_KEY")
        )
        
        # Memoria para mantener el contexto de la conversación
        self.memory = ConversationBufferMemory(return_messages=True)
        
        # Cargar conocimiento especializado según la especialidad
        self.knowledge_base = self._load_specialty_knowledge()
        
        # Prompt para el agente especialista
        self.specialist_prompt = PromptTemplate(
            input_variables=["patient_query", "specialty", "specialty_knowledge", "chat_history"],
            template="""
            Eres un médico especialista en {specialty} altamente capacitado.
            
            Conocimiento especializado para {specialty}: {specialty_knowledge}
            
            Historial de conversación:
            {chat_history}
            
            Consulta del paciente: {patient_query}
            
            Responde como un médico especialista en {specialty}, utilizando terminología apropiada 
            pero asegurándote de que sea comprensible para el paciente. Basa tu respuesta en 
            evidencia científica actual. Si no puedes proporcionar un diagnóstico definitivo, 
            explica posibles diagnósticos diferenciales y qué pruebas adicionales se requerirían.
            
            Siempre incluye un disclaimer al final recordando que eres un asistente IA y no un médico real,
            y que el paciente debe consultar con un profesional médico para un diagnóstico oficial.
            """
        )
        
        # Crear la cadena de procesamiento
        self.chain = LLMChain(
            llm=self.llm,
            prompt=self.specialist_prompt,
            verbose=False
        )
    
    def _load_specialty_knowledge(self):
        """
        Carga conocimiento específico de la especialidad desde archivos JSON
        o utiliza datos predeterminados si no existen.
        
        Returns:
            str: Conocimiento especializado para esta especialidad
        """
        # Intentar cargar desde un archivo JSON si existe
        knowledge_path = Path(__file__).parent / "knowledge" / f"{self.specialty}.json"
        
        # Conocimiento predeterminado por especialidad
        default_knowledge = {
            "cardiología": """Especialista en el diagnóstico y tratamiento de enfermedades del corazón y sistema circulatorio.
            Áreas de enfoque: insuficiencia cardíaca, arritmias, cardiopatía isquémica, valvulopatías, hipertensión arterial.
            Procedimientos comunes: ecocardiograma, prueba de esfuerzo, cateterismo cardíaco, angioplastia coronaria.
            Medicamentos habituales: beta-bloqueantes, anticoagulantes, estatinas, IECA, diuréticos.""",
            
            "neurología": """Especialista en trastornos del sistema nervioso, incluyendo cerebro, médula espinal y nervios periféricos.
            Áreas de enfoque: epilepsia, migraña, enfermedad de Parkinson, esclerosis múltiple, ictus, demencias.
            Procedimientos diagnósticos: electroencefalograma (EEG), electroneuromiografía, punción lumbar, neuroimagen.
            Medicamentos habituales: anticonvulsivantes, agonistas dopaminérgicos, triptanes, inmunomoduladores.""",
            
            "pediatría": """Especialista en la salud de bebés, niños y adolescentes hasta los 18 años.
            Áreas de enfoque: desarrollo infantil, vacunación, enfermedades infecciosas pediátricas, trastornos del crecimiento.
            Evaluaciones clave: hitos del desarrollo, crecimiento, estado nutricional, calendario vacunal.
            Consideraciones especiales: dosificación de medicamentos según peso, presentaciones pediátricas, consentimiento parental.""",
            
            "oncología": """Especialista en el diagnóstico y tratamiento del cáncer.
            Áreas de enfoque: tumores sólidos, neoplasias hematológicas, terapias dirigidas, inmunoterapia.
            Procedimientos comunes: biopsias, estadificación tumoral, quimioterapia, radioterapia, inmunoterapia.
            Consideraciones: efectos secundarios de tratamientos, cuidados paliativos, marcadores tumorales, ensayos clínicos.""",
            
            "dermatología": """Especialista en enfermedades de la piel, cabello y uñas.
            Áreas de enfoque: dermatitis, psoriasis, infecciones cutáneas, cáncer de piel, acné, rosácea.
            Procedimientos comunes: biopsia cutánea, crioterapia, extirpación de lesiones, tratamientos láser.
            Medicamentos habituales: corticosteroides tópicos, retinoides, antibióticos, antifúngicos, biológicos.""",
            
            "psiquiatría": """Especialista en salud mental y trastornos psiquiátricos.
            Áreas de enfoque: depresión, ansiedad, trastorno bipolar, esquizofrenia, adicciones, TDAH.
            Enfoques terapéuticos: farmacoterapia, psicoterapia, terapia electroconvulsiva.
            Medicamentos habituales: antidepresivos, ansiolíticos, antipsicóticos, estabilizadores del ánimo, hipnóticos.""",
            
            "medicina_interna": """Especialista en el diagnóstico y tratamiento no quirúrgico de enfermedades en adultos.
            Áreas de enfoque: enfermedades crónicas, diagnóstico diferencial, medicina preventiva.
            Enfoque integral considerando múltiples sistemas orgánicos y comorbilidades.
            Énfasis en la historia clínica detallada y exploración física completa.""",
            
            "emergencia": """Especialista en atención de condiciones médicas agudas y urgentes.
            Áreas de enfoque: traumatismos, emergencias cardiovasculares, intoxicaciones, disnea aguda.
            Procedimientos comunes: intubación, manejo de vía aérea, acceso vascular, drenaje torácico.
            Evaluación rápida mediante: triaje, ABCDE, escala de Glasgow, evaluación primaria y secundaria.""",
            
            "traumatology": """Especialista en el diagnóstico, tratamiento y rehabilitación de lesiones del sistema musculoesquelético.
            Áreas de enfoque: fracturas, lesiones articulares, lesiones ligamentosas, lesiones tendinosas, traumatismos deportivos.
            Procedimientos comunes: reducción de fracturas, inmovilización, cirugía ortopédica, artroscopia, rehabilitación.
            Evaluación clave: exploración física, pruebas de imagen (radiografías, resonancia magnética, TC), evaluación funcional.
            Tratamientos habituales: analgésicos, antiinflamatorios, fisioterapia, terapia ocupacional, cirugía ortopédica.
            Consideraciones especiales: evaluación del mecanismo lesional, estabilidad articular, compromiso neurovascular."""
        }
        
        # Si existe un archivo JSON, intentar cargarlo
        if knowledge_path.exists():
            try:
                with open(knowledge_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get("knowledge", default_knowledge.get(self.specialty, ""))
            except Exception as e:
                print(f"Error al cargar conocimiento para {self.specialty}: {e}")
        
        # Si no existe o hubo error, usar conocimiento predeterminado
        return default_knowledge.get(self.specialty, "Conocimiento médico general basado en evidencia científica actual.")
    
    def respond(self, patient_query, chat_history=None):
        """
        Genera una respuesta especializada a la consulta del paciente
        
        Args:
            patient_query: Consulta del paciente
            chat_history: Historial de chat opcional
            
        Returns:
            str: Respuesta del especialista
        """
        # Usar historial proporcionado o el almacenado en memoria
        if chat_history is None:
            if hasattr(self.memory, 'buffer') and self.memory.buffer:
                chat_history = self.memory.buffer
            else:
                chat_history = "No hay historial de conversación previo."
        
        # Generar respuesta
        response = self.chain.invoke({
            "patient_query": patient_query,
            "specialty": self.specialty,
            "specialty_knowledge": self.knowledge_base,
            "chat_history": chat_history
        })
        
        # Guardar en memoria si está disponible
        if hasattr(self.memory, 'save_context'):
            self.memory.save_context({"input": patient_query}, {"output": response['text']})
        
        return response['text'] 