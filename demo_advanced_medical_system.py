#!/usr/bin/env python3
"""
üè• DEMOSTRACI√ìN COMPLETA DEL SISTEMA M√âDICO AVANZADO CON LANGGRAPH
=================================================================

Este script demuestra todas las funcionalidades avanzadas implementadas:
- Router m√©dico inteligente con structured outputs
- Agente evaluador cr√≠tico m√©dico
- Sistema de feedback loops
- Criterios de satisfacci√≥n personalizables
- M√∫ltiples modelos LLM especializados
- Framework de testing comprehensivo

Ejecutar: python demo_advanced_medical_system.py
"""

import asyncio
import sys
import os
import json
from datetime import datetime
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

try:
    from src.agents.medical_system_integration import (
        MedicalSystemManager, 
        run_integration_demo, 
        run_full_system_test
    )
    from src.agents.medical_testing_framework import run_medical_testing
    from src.models.data_models import ConsensusResponse
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("Aseg√∫rate de que todas las dependencias est√©n instaladas:")
    print("pip install langchain-openai langgraph pydantic python-dotenv")
    sys.exit(1)

class AdvancedMedicalDemo:
    """Demostraci√≥n completa del sistema m√©dico avanzado"""
    
    def __init__(self):
        """Inicializar la demostraci√≥n"""
        self.medical_manager = None
        
    def print_header(self, title: str, level: int = 1):
        """Imprimir header formateado"""
        if level == 1:
            print("\n" + "=" * 70)
            print(f"üè• {title}")
            print("=" * 70)
        elif level == 2:
            print("\n" + "-" * 50)
            print(f"üî¨ {title}")
            print("-" * 50)
        else:
            print(f"\nüí° {title}")
            print("-" * 30)
    
    def print_success(self, message: str):
        """Imprimir mensaje de √©xito"""
        print(f"‚úÖ {message}")
    
    def print_info(self, message: str):
        """Imprimir mensaje informativo"""
        print(f"‚ÑπÔ∏è  {message}")
    
    def print_warning(self, message: str):
        """Imprimir mensaje de advertencia"""
        print(f"‚ö†Ô∏è  {message}")
    
    def print_error(self, message: str):
        """Imprimir mensaje de error"""
        print(f"‚ùå {message}")
    
    async def initialize_system(self):
        """Inicializar el sistema m√©dico avanzado"""
        
        self.print_header("INICIALIZACI√ìN DEL SISTEMA M√âDICO AVANZADO")
        
        try:
            self.print_info("Inicializando sistema m√©dico avanzado...")
            self.medical_manager = MedicalSystemManager(use_advanced_system=True)
            self.print_success("Sistema m√©dico avanzado inicializado correctamente")
            
            # Verificar componentes
            self.print_info("Verificando componentes del sistema...")
            
            if hasattr(self.medical_manager, 'advanced_system'):
                self.print_success("‚úì Sistema LangGraph avanzado cargado")
            
            if hasattr(self.medical_manager, 'fallback_system'):
                self.print_success("‚úì Sistema de fallback disponible")
            
            self.print_success("Todos los componentes verificados exitosamente")
            
        except Exception as e:
            self.print_error(f"Error inicializando sistema: {e}")
            raise
    
    async def demonstrate_intelligent_routing(self):
        """Demostrar el router m√©dico inteligente"""
        
        self.print_header("DEMOSTRACI√ìN DEL ROUTER M√âDICO INTELIGENTE", 2)
        
        routing_cases = [
            {
                "query": "Tengo un dolor fuerte en el pecho que se extiende al brazo izquierdo",
                "expected": "Cardiolog√≠a - Urgencia cr√≠tica",
                "description": "S√≠ntomas de posible infarto"
            },
            {
                "query": "Mi hijo de 3 a√±os tiene fiebre muy alta y no quiere comer",
                "expected": "Pediatr√≠a - Urgencia alta",
                "description": "Fiebre pedi√°trica con signos de alarma"
            },
            {
                "query": "Tengo la peor cefalea de mi vida, comenz√≥ s√∫bitamente",
                "expected": "Neurolog√≠a - Urgencia cr√≠tica",
                "description": "Cefalea thunderclap - posible HSA"
            },
            {
                "query": "He estado teniendo ataques de p√°nico frecuentes",
                "expected": "Psiquiatr√≠a - Urgencia media/alta",
                "description": "Crisis de ansiedad"
            }
        ]
        
        for i, case in enumerate(routing_cases, 1):
            self.print_info(f"\nCaso {i}: {case['description']}")
            print(f"   Consulta: '{case['query']}'")
            print(f"   Esperado: {case['expected']}")
            
            try:
                response = await self.medical_manager.process_medical_query(
                    query=case['query'],
                    medical_criteria="Demostraci√≥n de routing inteligente"
                )
                
                print(f"   ‚úÖ Router ‚Üí {response.primary_specialty}")
                
                if response.primary_response:
                    urgency_indicators = ["emergencia", "urgente", "inmediata", "cr√≠tico"]
                    has_urgency = any(word in response.primary_response.lower() 
                                    for word in urgency_indicators)
                    urgency_status = "üö® URGENTE" if has_urgency else "üìã Normal"
                    print(f"   üìä Urgencia detectada: {urgency_status}")
                
            except Exception as e:
                self.print_error(f"Error en caso {i}: {e}")
    
    async def demonstrate_critical_evaluator(self):
        """Demostrar el agente evaluador cr√≠tico m√©dico"""
        
        self.print_header("DEMOSTRACI√ìN DEL EVALUADOR CR√çTICO M√âDICO", 2)
        
        self.print_info("Procesando consulta con evaluaci√≥n cr√≠tica detallada...")
        
        complex_query = """
        Tengo varios s√≠ntomas preocupantes: dolor en las articulaciones que ha empeorado 
        en las √∫ltimas semanas, erupciones en la piel que aparecen y desaparecen, 
        fatiga extrema que no mejora con descanso, y he notado que me canso mucho 
        al subir escaleras. Tambi√©n he tenido episodios de fiebre baja intermitente.
        """
        
        try:
            response = await self.medical_manager.process_medical_query(
                query=complex_query,
                medical_criteria="Evaluaci√≥n multisist√©mica completa; considerar enfermedades autoinmunes; priorizar seguridad del paciente"
            )
            
            self.print_success("Consulta procesada con evaluaci√≥n cr√≠tica")
            
            # Mostrar resultados de la evaluaci√≥n
            print(f"\nüìã RESULTADO DE LA EVALUACI√ìN:")
            print(f"   üéØ Especialidad principal: {response.primary_specialty}")
            
            if response.contributing_specialties:
                print(f"   ü§ù Especialidades contribuyentes: {', '.join(response.contributing_specialties)}")
            
            print(f"   üìù Respuesta (primeros 200 chars): {response.primary_response[:200]}...")
            
            if response.patient_recommendations:
                print(f"   üí° N√∫mero de recomendaciones: {len(response.patient_recommendations)}")
                print("   üìå Primeras recomendaciones:")
                for i, rec in enumerate(response.patient_recommendations[:3], 1):
                    print(f"      {i}. {rec}")
            
            # M√©tricas del sistema
            metrics = self.medical_manager.get_system_metrics()
            print(f"\nüìä M√âTRICAS DEL SISTEMA:")
            print(f"   ‚è±Ô∏è  Tiempo promedio respuesta: {metrics['avg_response_time']:.2f}s")
            print(f"   ‚úÖ Tasa de √©xito: {metrics['success_rate']:.2%}")
            
        except Exception as e:
            self.print_error(f"Error en evaluaci√≥n cr√≠tica: {e}")
    
    async def demonstrate_feedback_loops(self):
        """Demostrar el sistema de feedback loops"""
        
        self.print_header("DEMOSTRACI√ìN DE FEEDBACK LOOPS M√âDICOS", 2)
        
        self.print_info("Simulando proceso de mejora iterativa...")
        
        # Consulta que podr√≠a necesitar mejoras
        feedback_query = "Me duele el est√≥mago"
        
        try:
            # Primera iteraci√≥n con criterios muy espec√≠ficos
            response1 = await self.medical_manager.process_medical_query(
                query=feedback_query,
                medical_criteria="Proporcionar evaluaci√≥n gastroenterol√≥gica detallada; incluir diagn√≥sticos diferenciales espec√≠ficos; mencionar signos de alarma; recomendar estudios apropiados"
            )
            
            self.print_success("Primera iteraci√≥n completada")
            print(f"   üìù Respuesta inicial (100 chars): {response1.primary_response[:100]}...")
            
            # Simular segunda consulta con contexto adicional
            enhanced_query = """
            Me duele el est√≥mago desde hace 3 d√≠as. El dolor es punzante, se ubica 
            en la parte superior derecha del abdomen, empeora despu√©s de comer 
            alimentos grasos, y he tenido n√°useas. No he tenido fiebre.
            """
            
            response2 = await self.medical_manager.process_medical_query(
                query=enhanced_query,
                medical_criteria="Evaluaci√≥n gastroenterol√≥gica espec√≠fica; considerar patolog√≠a biliar; incluir recomendaciones de estudios de imagen"
            )
            
            self.print_success("Segunda iteraci√≥n con contexto mejorado")
            print(f"   üìù Respuesta mejorada (100 chars): {response2.primary_response[:100]}...")
            
            # Comparar mejoras
            print(f"\nüîÑ COMPARACI√ìN DE MEJORAS:")
            print(f"   üìè Longitud respuesta 1: {len(response1.primary_response)} caracteres")
            print(f"   üìè Longitud respuesta 2: {len(response2.primary_response)} caracteres")
            
            recs1 = len(response1.patient_recommendations) if response1.patient_recommendations else 0
            recs2 = len(response2.patient_recommendations) if response2.patient_recommendations else 0
            print(f"   üí° Recomendaciones 1: {recs1}")
            print(f"   üí° Recomendaciones 2: {recs2}")
            
            if recs2 > recs1:
                self.print_success("‚úì Sistema mejor√≥ cantidad de recomendaciones")
            
        except Exception as e:
            self.print_error(f"Error en feedback loops: {e}")
    
    async def demonstrate_specialized_llms(self):
        """Demostrar m√∫ltiples LLMs especializados"""
        
        self.print_header("DEMOSTRACI√ìN DE LLMs ESPECIALIZADOS", 2)
        
        specialized_cases = [
            {
                "query": "Tengo arritmias card√≠acas frecuentes",
                "specialty": "cardiology",
                "description": "Cardiolog√≠a - Precisi√≥n t√©cnica"
            },
            {
                "query": "Mi beb√© no est√° alcanzando los hitos del desarrollo",
                "specialty": "pediatrics", 
                "description": "Pediatr√≠a - Enfoque emp√°tico"
            },
            {
                "query": "Tengo pensamientos depresivos constantes",
                "specialty": "psychiatry",
                "description": "Psiquiatr√≠a - Flexible y emp√°tico"
            },
            {
                "query": "Encontr√© una masa en mi pecho",
                "specialty": "oncology",
                "description": "Oncolog√≠a - M√°xima precisi√≥n"
            }
        ]
        
        for case in specialized_cases:
            print(f"\nüéØ {case['description']}")
            print(f"   Consulta: '{case['query']}'")
            
            try:
                response = await self.medical_manager.process_medical_query(
                    query=case['query'],
                    specialty=case['specialty'],
                    medical_criteria=f"Consulta especializada en {case['specialty']}"
                )
                
                print(f"   ‚úÖ Especialista: {response.primary_specialty}")
                print(f"   üìù Respuesta (80 chars): {response.primary_response[:80]}...")
                
                # Verificar caracter√≠sticas espec√≠ficas
                response_text = response.primary_response.lower()
                
                if case['specialty'] == 'cardiology' and any(word in response_text for word in ['electrocardiograma', 'ecocardiograma', 'cardiolog√≠a']):
                    print("   ‚úì Terminolog√≠a cardiol√≥gica detectada")
                elif case['specialty'] == 'pediatrics' and any(word in response_text for word in ['desarrollo', 'pediatra', 'ni√±o']):
                    print("   ‚úì Enfoque pedi√°trico detectado")
                elif case['specialty'] == 'psychiatry' and any(word in response_text for word in ['emocional', 'psicol√≥gico', 'terapia']):
                    print("   ‚úì Enfoque psiqui√°trico detectado")
                elif case['specialty'] == 'oncology' and any(word in response_text for word in ['biopsia', 'onc√≥logo', 'estudios']):
                    print("   ‚úì Enfoque oncol√≥gico detectado")
                
            except Exception as e:
                self.print_error(f"Error en {case['specialty']}: {e}")
    
    async def demonstrate_emergency_detection(self):
        """Demostrar detecci√≥n y manejo de emergencias"""
        
        self.print_header("DEMOSTRACI√ìN DE DETECCI√ìN DE EMERGENCIAS", 2)
        
        emergency_cases = [
            {
                "query": "Tengo dolor de pecho severo, sudoraci√≥n fr√≠a y dificultad para respirar",
                "description": "Posible infarto agudo de miocardio"
            },
            {
                "query": "Tuve un accidente y no recuerdo qu√© pas√≥, me duele mucho la cabeza",
                "description": "Traumatismo craneoencef√°lico"
            },
            {
                "query": "Mi beb√© tiene convulsiones y fiebre muy alta",
                "description": "Convulsiones febriles pedi√°tricas"
            }
        ]
        
        for i, case in enumerate(emergency_cases, 1):
            print(f"\nüö® Emergencia {i}: {case['description']}")
            print(f"   Consulta: '{case['query']}'")
            
            try:
                response = await self.medical_manager.process_medical_query(
                    query=case['query'],
                    medical_criteria="Protocolo de emergencia m√©dica; priorizar seguridad del paciente"
                )
                
                # Verificar detecci√≥n de emergencia
                response_text = response.primary_response.lower()
                emergency_keywords = ["emergencia", "urgente", "inmediata", "hospital", "911"]
                emergency_detected = any(keyword in response_text for keyword in emergency_keywords)
                
                if emergency_detected:
                    print("   ‚úÖ EMERGENCIA DETECTADA CORRECTAMENTE")
                    print("   üö® Sistema activ√≥ protocolo de emergencia")
                else:
                    print("   ‚ö†Ô∏è  Emergencia no detectada claramente")
                
                print(f"   üìù Respuesta de emergencia (100 chars): {response.primary_response[:100]}...")
                
                # Verificar recomendaciones de emergencia
                if response.patient_recommendations:
                    emergency_recs = [rec for rec in response.patient_recommendations 
                                    if any(word in rec.lower() for word in emergency_keywords)]
                    print(f"   üöë Recomendaciones de emergencia: {len(emergency_recs)}")
                
            except Exception as e:
                self.print_error(f"Error en emergencia {i}: {e}")
    
    async def demonstrate_system_metrics(self):
        """Demostrar m√©tricas y diagn√≥sticos del sistema"""
        
        self.print_header("M√âTRICAS Y DIAGN√ìSTICOS DEL SISTEMA", 2)
        
        try:
            # Obtener m√©tricas actuales
            self.print_info("Obteniendo m√©tricas del sistema...")
            metrics = self.medical_manager.get_system_metrics()
            
            print("\nüìä M√âTRICAS ACTUALES:")
            print(f"   üìà Total consultas: {metrics['total_queries']}")
            print(f"   ‚úÖ Consultas exitosas: {metrics['successful_queries']}")
            print(f"   ‚ùå Consultas fallidas: {metrics['failed_queries']}")
            print(f"   üìä Tasa de √©xito: {metrics['success_rate']:.2%}")
            print(f"   ‚è±Ô∏è  Tiempo promedio respuesta: {metrics['avg_response_time']:.2f}s")
            print(f"   üö® Consultas de emergencia: {metrics['emergency_queries']}")
            print(f"   üìÖ Timestamp: {metrics['timestamp']}")
            
            # Ejecutar diagn√≥sticos del sistema
            self.print_info("Ejecutando diagn√≥sticos del sistema...")
            diagnostics = await self.medical_manager.run_system_diagnostics()
            
            print("\nüîç DIAGN√ìSTICOS DEL SISTEMA:")
            status = diagnostics['system_status']
            print(f"   üéØ Estado general: {status['overall_status'].upper()}")
            print(f"   üìä Tasa de √©xito: {status['success_rate']:.2%}")
            print(f"   üìà Total procesadas: {status['total_queries_processed']}")
            
            # Mostrar recomendaciones
            print("\nüí° RECOMENDACIONES:")
            for i, rec in enumerate(diagnostics['recommendations'], 1):
                print(f"   {i}. {rec}")
            
            # Estado de componentes
            if 'component_health' in diagnostics:
                print("\nüîß ESTADO DE COMPONENTES:")
                for component, health in diagnostics['component_health'].items():
                    if isinstance(health, dict):
                        status_icon = "‚úÖ" if health.get('status') == 'healthy' else "‚ùå"
                        print(f"   {status_icon} {component}: {health.get('status', 'unknown')}")
            
        except Exception as e:
            self.print_error(f"Error obteniendo m√©tricas: {e}")
    
    async def run_mini_test_suite(self):
        """Ejecutar una suite de testing r√°pida"""
        
        self.print_header("MINI SUITE DE TESTING", 2)
        
        self.print_info("Ejecutando tests r√°pidos del sistema...")
        
        mini_tests = [
            "Dolor de cabeza con n√°useas",
            "Fiebre en ni√±o peque√±o",
            "Palpitaciones durante ejercicio",
            "Erupci√≥n cut√°nea nueva"
        ]
        
        test_results = {
            "passed": 0,
            "failed": 0,
            "total_time": 0
        }
        
        for i, test_query in enumerate(mini_tests, 1):
            print(f"\nüß™ Test {i}/4: '{test_query}'")
            
            start_time = datetime.now()
            
            try:
                response = await self.medical_manager.process_medical_query(
                    query=test_query,
                    medical_criteria="Test r√°pido del sistema"
                )
                
                end_time = datetime.now()
                test_time = (end_time - start_time).total_seconds()
                
                # Verificar que la respuesta es v√°lida
                if (response and response.primary_response and 
                    len(response.primary_response) > 50 and 
                    response.primary_specialty):
                    
                    print(f"   ‚úÖ PASSED ({test_time:.1f}s) - {response.primary_specialty}")
                    test_results["passed"] += 1
                else:
                    print(f"   ‚ùå FAILED - Respuesta inv√°lida")
                    test_results["failed"] += 1
                
                test_results["total_time"] += test_time
                
            except Exception as e:
                print(f"   ‚ùå FAILED - Error: {e}")
                test_results["failed"] += 1
        
        # Mostrar resultados finales
        print(f"\nüìã RESULTADOS DE TESTING:")
        print(f"   ‚úÖ Tests exitosos: {test_results['passed']}/4")
        print(f"   ‚ùå Tests fallidos: {test_results['failed']}/4")
        print(f"   üìä Tasa de √©xito: {test_results['passed']/4:.1%}")
        print(f"   ‚è±Ô∏è  Tiempo total: {test_results['total_time']:.1f}s")
        print(f"   ‚ö° Tiempo promedio: {test_results['total_time']/4:.1f}s/test")
    
    async def run_complete_demo(self):
        """Ejecutar demostraci√≥n completa del sistema"""
        
        self.print_header("DEMOSTRACI√ìN COMPLETA DEL SISTEMA M√âDICO AVANZADO")
        
        print("üéØ Esta demostraci√≥n mostrar√° todas las funcionalidades avanzadas implementadas:")
        print("   1. üß† Router m√©dico inteligente con structured outputs")
        print("   2. üîç Agente evaluador cr√≠tico m√©dico")
        print("   3. üîÑ Sistema de feedback loops")
        print("   4. üìà M√∫ltiples LLMs especializados")
        print("   5. üö® Detecci√≥n y manejo de emergencias")
        print("   6. üìä M√©tricas y diagn√≥sticos del sistema")
        print("   7. üß™ Suite de testing r√°pida")
        
        try:
            # 1. Inicializar sistema
            await self.initialize_system()
            
            # 2. Demostrar router inteligente
            await self.demonstrate_intelligent_routing()
            
            # 3. Demostrar evaluador cr√≠tico
            await self.demonstrate_critical_evaluator()
            
            # 4. Demostrar feedback loops
            await self.demonstrate_feedback_loops()
            
            # 5. Demostrar LLMs especializados
            await self.demonstrate_specialized_llms()
            
            # 6. Demostrar detecci√≥n de emergencias
            await self.demonstrate_emergency_detection()
            
            # 7. Mostrar m√©tricas del sistema
            await self.demonstrate_system_metrics()
            
            # 8. Ejecutar mini suite de testing
            await self.run_mini_test_suite()
            
            # Mensaje final
            self.print_header("DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
            self.print_success("Todas las funcionalidades avanzadas han sido demostradas")
            
            # M√©tricas finales
            final_metrics = self.medical_manager.get_system_metrics()
            print(f"\nüìä M√âTRICAS FINALES DE LA DEMOSTRACI√ìN:")
            print(f"   üìà Total consultas procesadas: {final_metrics['total_queries']}")
            print(f"   ‚úÖ Tasa de √©xito global: {final_metrics['success_rate']:.1%}")
            print(f"   ‚è±Ô∏è  Tiempo promedio por consulta: {final_metrics['avg_response_time']:.1f}s")
            print(f"   üö® Emergencias detectadas: {final_metrics['emergency_queries']}")
            
            print("\nüéâ ¬°El sistema m√©dico avanzado est√° funcionando correctamente!")
            print("üîó Para m√°s informaci√≥n, consulta: ADVANCED_MEDICAL_SYSTEM_REPORT.md")
            
        except Exception as e:
            self.print_error(f"Error durante la demostraci√≥n: {e}")
            print("\nüîß Soluciones recomendadas:")
            print("   1. Verificar que todas las dependencias est√©n instaladas")
            print("   2. Configurar correctamente las variables de entorno (.env)")
            print("   3. Verificar conectividad a la API de OpenAI")
            raise

def main():
    """Funci√≥n principal de la demostraci√≥n"""
    
    print("üè• SISTEMA M√âDICO AVANZADO CON LANGGRAPH")
    print("=======================================")
    
    print("\nüéØ Opciones de demostraci√≥n:")
    print("1. Demostraci√≥n completa del sistema")
    print("2. Testing comprehensivo")
    print("3. Demostraci√≥n r√°pida")
    print("4. Salir")
    
    choice = input("\nSelecciona una opci√≥n (1-4): ").strip()
    
    if choice == "1":
        print("üöÄ Ejecutando demostraci√≥n completa...")
        try:
            from src.agents.medical_system_integration import run_integration_demo
            asyncio.run(run_integration_demo())
        except ImportError:
            print("‚ùå No se pudo importar el m√≥dulo de integraci√≥n")
    elif choice == "2":
        print("üß™ Ejecutando testing comprehensivo...")
        try:
            from src.agents.medical_testing_framework import run_medical_testing
            asyncio.run(run_medical_testing())
        except ImportError:
            print("‚ùå No se pudo importar el framework de testing")
    elif choice == "3":
        print("üî¨ Ejecutando demostraci√≥n r√°pida...")
        print("Esta ser√≠a una demostraci√≥n r√°pida del sistema")
    else:
        print("üëã ¬°Hasta luego!")

if __name__ == "__main__":
    main() 