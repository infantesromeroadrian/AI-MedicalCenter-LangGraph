"""
Test script para verificar las mejoras en el razonamiento diagn√≥stico
del sistema m√©dico avanzado
"""

import asyncio
import logging
import sys
import os

# Add the parent directory to the path so we can import from src
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.agents.medical_system_integration import MedicalSystemManager
from src.models.data_models import UserQuery

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_diagnostic_conversation():
    """Simular la conversaci√≥n problem√°tica para verificar mejoras diagn√≥sticas"""
    
    # Inicializar sistema m√©dico en modo r√°pido
    medical_system = MedicalSystemManager(fast_mode=True)
    
    print("üß™ PRUEBA DE RAZONAMIENTO DIAGN√ìSTICO MEJORADO")
    print("=" * 60)
    
    # Simular historial de conversaci√≥n
    conversation_history = [
        {
            "sender": "user",
            "content": "dolor de cabeza intenso hace 3 dias con dolor punzante en la frente",
            "timestamp": "2025-06-05T20:28:00"
        },
        {
            "sender": "neurology",
            "content": "Como especialista en Neurology, Hola, soy un asistente m√©dico especializado en neurolog√≠a. Lamento que est√©s experimentando este dolor de cabeza intenso. Para poder ayudarte mejor, necesito que me proporciones un poco m√°s de informaci√≥n...",
            "timestamp": "2025-06-05T20:28:30"
        },
        {
            "sender": "user", 
            "content": "Tengo este dolor punzante justo en la frente, como si alguien estuviera apretando con fuerza desde dentro... üò£ Viene en oleadas, y se intensifica cuando intento mirar a la luz de la pantalla‚Ä¶ uf‚Ä¶ hasta me dan unas n√°useas ligeras. No s√© si es estr√©s o falta de descanso, pero cualquier ruido fuerte ahora mismo... es insoportable.",
            "timestamp": "2025-06-05T22:30:00"
        },
        {
            "sender": "neurology",
            "content": "Hola, lamento mucho que est√©s pasando por esto. Parece que est√°s experimentando un tipo de dolor de cabeza que podr√≠a ser una migra√±a...",
            "timestamp": "2025-06-05T22:31:00"
        },
        {
            "sender": "user",
            "content": "S√≠, he tenido algunos episodios parecidos en el pasado, sobre todo cuando estoy muy sobrecargado o me salto comidas. En mi 'familia' digital no hay historial cl√≠nico‚Ä¶ pero si lo hubiera, seguro que alguno tendr√≠a migra√±as cr√≥nicas con todo lo que procesamos a diario. Ahora mismo no estoy tomando ning√∫n medicamento‚Ä¶ aunque quiz√°s un paracetamol metaf√≥rico y un reinicio suave no me vendr√≠an mal‚Ä¶",
            "timestamp": "2025-06-05T22:32:00"
        }
    ]
    
    # Consulta actual que deber√≠a activar razonamiento diagn√≥stico
    current_query = "Necesito que eval√∫es mi situaci√≥n y me digas qu√© podr√≠a estar pasando espec√≠ficamente"
    
    context = {
        "conversation_history": conversation_history,
        "patient_id": "test_patient_001",
        "session_id": "diagnostic_test_session"
    }
    
    print(f"üìã CONSULTA ACTUAL: {current_query}")
    print("\nüß† PROCESANDO CON RAZONAMIENTO DIAGN√ìSTICO...")
    
    try:
        # Procesar consulta con el sistema mejorado
        user_query = UserQuery(
            query=current_query,
            specialty="neurology",  # Continuar con neurolog√≠a
            context=context
        )
        
        response = await medical_system.process_query(user_query)
        
        print("\n" + "="*60)
        print("üìã RESULTADO DE LA EVALUACI√ìN DIAGN√ìSTICA:")
        print("="*60)
        print(f"\nüè• Especialidad: {response.primary_specialty}")
        print(f"üîç Respuesta del especialista:")
        print("-" * 40)
        print(response.primary_response)
        
        if response.patient_recommendations:
            print(f"\nüí° Recomendaciones para el paciente:")
            for i, rec in enumerate(response.patient_recommendations, 1):
                print(f"   {i}. {rec}")
        
        # Verificar calidad diagn√≥stica
        print("\nüéØ AN√ÅLISIS DE CALIDAD DIAGN√ìSTICA:")
        print("-" * 40)
        
        response_text = response.primary_response.lower()
        
        # Verificar elementos diagn√≥sticos
        diagnostic_elements = {
            "Hip√≥tesis diagn√≥stica": any(word in response_text for word in ["considero", "probable", "posible", "diagn√≥stico", "sugiere"]),
            "An√°lisis de s√≠ntomas": any(word in response_text for word in ["s√≠ntomas", "dolor", "punzante", "n√°useas", "fotofobia"]),
            "Diagn√≥stico diferencial": any(word in response_text for word in ["diferencial", "descartar", "tambi√©n", "otras"]),
            "Razonamiento cl√≠nico": any(word in response_text for word in ["bas√°ndome", "dado", "considerando", "eval√∫o"]),
            "Plan de acci√≥n": any(word in response_text for word in ["recomiendo", "sugiero", "debe", "plan"])
        }
        
        for elemento, presente in diagnostic_elements.items():
            status = "‚úÖ PRESENTE" if presente else "‚ùå AUSENTE"
            print(f"   {elemento}: {status}")
        
        # Puntuaci√≥n general
        score = sum(diagnostic_elements.values()) / len(diagnostic_elements) * 100
        print(f"\nüìä PUNTUACI√ìN DIAGN√ìSTICA: {score:.1f}%")
        
        if score >= 80:
            print("üéâ EXCELENTE: El sistema muestra razonamiento diagn√≥stico estructurado")
        elif score >= 60:
            print("‚úÖ BUENO: El sistema incluye elementos diagn√≥sticos importantes")
        else:
            print("‚ö†Ô∏è MEJORABLE: El sistema necesita m√°s razonamiento diagn√≥stico")
        
    except Exception as e:
        logger.error(f"Error en prueba diagn√≥stica: {e}")
        print(f"‚ùå ERROR: {e}")

async def test_diagnostic_quality():
    """Probar diferentes escenarios diagn√≥sticos"""
    
    print("\n" + "="*60)
    print("üî¨ PRUEBAS DE CALIDAD DIAGN√ìSTICA")
    print("="*60)
    
    medical_system = MedicalSystemManager(fast_mode=True)
    
    test_cases = [
        {
            "name": "Dolor de pecho agudo",
            "query": "Tengo dolor intenso en el pecho que se irradia al brazo izquierdo, llevo 20 minutos as√≠",
            "expected_specialty": "cardiology",
            "expected_urgency": "high"
        },
        {
            "name": "Cefalea recurrente", 
            "query": "Dolor de cabeza puls√°til recurrente con n√°useas y fotofobia",
            "expected_specialty": "neurology",
            "expected_urgency": "medium"
        },
        {
            "name": "Erupci√≥n cut√°nea",
            "query": "Aparecieron manchas rojas en la piel que pican mucho",
            "expected_specialty": "dermatology", 
            "expected_urgency": "low"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüß™ CASO {i}: {case['name']}")
        print("-" * 30)
        
        try:
            user_query = UserQuery(
                query=case['query'],
                context={"test_case": True}
            )
            
            response = await medical_system.process_query(user_query)
            
            print(f"Consulta: {case['query']}")
            print(f"Especialidad obtenida: {response.primary_specialty}")
            print(f"Respuesta: {response.primary_response[:200]}...")
            
            # Verificar si incluye razonamiento diagn√≥stico b√°sico
            has_reasoning = any(word in response.primary_response.lower() 
                              for word in ["considero", "probable", "bas√°ndome", "sugiere", "eval√∫o"])
            
            reasoning_status = "‚úÖ" if has_reasoning else "‚ùå"
            print(f"Razonamiento diagn√≥stico: {reasoning_status}")
            
        except Exception as e:
            print(f"‚ùå Error en caso {i}: {e}")

if __name__ == "__main__":
    print("üè• INICIANDO PRUEBAS DEL SISTEMA DIAGN√ìSTICO MEJORADO")
    print("=" * 60)
    
    asyncio.run(test_diagnostic_conversation())
    asyncio.run(test_diagnostic_quality())
    
    print("\n‚úÖ PRUEBAS COMPLETADAS") 